<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hackety hack hack]]></title>
  <link href="http://blog.johl.io/atom.xml" rel="self"/>
  <link href="http://blog.johl.io/"/>
  <updated>2015-01-17T22:49:46+01:00</updated>
  <id>http://blog.johl.io/</id>
  <author>
    <name><![CDATA[Jens Ohlig]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mein Internet ist leer! Was könnte ich sonst noch lesen?]]></title>
    <link href="http://blog.johl.io/blog/2015/01/17/lesen/"/>
    <updated>2015-01-17T21:29:00+01:00</updated>
    <id>http://blog.johl.io/blog/2015/01/17/lesen</id>
    <content type="html"><![CDATA[<p>Zum Glück gibt es im Internet mehr als genug Links. Zum Lesen bleibt immer etwas. Es gäbe diesen Artikel darüber, <a href="http://www.vice.com/read/something-for-everyone-0000546-v22n1">warum sich die Elite im Silicon Valley neuerdings für das Bedingungslose Grundeinkommen interessiert</a>:„<em>Basic income, it turns out, is in the peculiar class of political notions that can warm Leninist and libertarian hearts alike. Though it&#8217;s an essentially low-tech proposal, it appeals to Silicon Valley&#8217;s longing for simple, elegant algorithms to solve everything. Supporters list the possible results: It can end poverty and inequality with hardly any bureaucracy. With more money and less work to do, we might even spew less climate-disrupting carbon.</em>“</p>

<p>Dann ist da noch ein Fanzine für Sci-Fi mit afrikanischer Perspektive: <a href="http://omenana.com/">omenana aus Nigeria</a>.</p>

<p>Dieser Text von <a href="https://en.wikipedia.org/wiki/Martin_Fowler">Martin Fowler</a> (der mit dem Refactoring) ist auch sehr lesenswert: <a href="http://martinfowler.com/bliki/DiversityMediocrityIllusion.html">DiversityMediocrityIllusion</a>. „<em>A common argument against pushing for greater diversity is that it will lower standards, raising the spectre of a diverse but mediocre group.  To understand why this is an illusionary concern, I like to consider a little thought experiment.</em>“</p>

<p>Oder die Seite von <a href="https://www.afrileaks.org/">afriLeaks</a>: „<em>afriLeaks allows you to leak confidential documents of public interest. We’ve designed a system that helps you to share these materials while protecting your own identity, making it very hard to identify you as the source of the leak.  AfriLeaks is run by an alliance of African news organisations that are committed to speaking truth to power. You will be able to send us documents and select which of our member organisations should investigate it. This site also helps you to stay in touch and answer further questions without revealing your name or contact information.</em>“</p>

<p>Interessant ist auch dieses Experiment zu Urban Gardening und den Commons, über Schafe in der Stadt: <a href="https://stadtschnuggen.wordpress.com/2015/01/11/claim-the-street-for-your-sheep/">Stadtschnuggen</a>.</p>

<p>Vielleicht habt ihr ja schon den Artikel von Cory Doctorow gelesen „<a href="http://www.wired.com/2014/12/government-computer-security"><em>How Laws Restricting Tech Actually Expose Us to Greater Harm</em></a>“ oder die <a href="http://www.cluetrain.com/newclues/">New Clues</a> von den Autoren des <a href="https://en.wikipedia.org/wiki/The_Cluetrain_Manifesto">Cluetrain Manifesto</a>. Wenn nicht, könnt ihr das nachholen.</p>

<p>Es gibt aber auch Lesestoff zur Urheberrechtsproblematik in der Modebranche: „<a href="http://papers.ssrn.com/sol3/papers.cfm?abstract_id=878401"><em>The Piracy Paradox: Innovation and Intellectual Property in Fashion Design</em></a>“. Und aus Polen stammt eine Textsammlung mit Zukunftsvisionen zum Immaterialgüterrecht: „<a href="http://prawokultury.pl/scenarios/"><em>Right to Culture: Future Scenarios</em></a>“.</p>

<p>Bei so viel Stoff zum Lesen ist es ganz gut, dass die Zukunft zumindest in einem Bereich hoffnungsvoll aussieht: „<a href="http://www.theguardian.com/science/2015/jan/11/-sp-live-forever-extend-life-calico-google-longevity"><em>Live for ever: Scientists say they’ll soon extend life ‘well beyond 120’</em></a>“.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Einhegungen fallen nicht vom Himmel]]></title>
    <link href="http://blog.johl.io/blog/2015/01/11/einhegungen/"/>
    <updated>2015-01-11T17:11:00+01:00</updated>
    <id>http://blog.johl.io/blog/2015/01/11/einhegungen</id>
    <content type="html"><![CDATA[<p>Aaron Swartz starb heute vor zwei Jahren. Das Internet ohne Einhegungen auf Grundlage der Allmende war bereits schon dabei, parzelliert und eingezäunt zu werden.</p>

<blockquote><p>Information is power. But like all power, there are those who want to keep it for themselves. The world&#8217;s entire scientific and cultural heritage, published over centuries in books and journals, is increasingly being digitized and locked up by a handful of private corporations. Want to read the papers featuring the most famous results of the sciences? You&#8217;ll need to send enormous amounts to publishers like Reed Elsevier. </p><p>There are those struggling to change this. The Open Access Movement has fought valiantly to ensure that scientists do not sign their copyrights away but instead ensure their work is published on the Internet, under terms that allow anyone to access it. But even under the best scenarios, their work will only apply to things published in the future.  Everything up until now will have been lost.  </p><p>That is too high a price to pay. Forcing academics to pay money to read the work of their colleagues? Scanning entire libraries but only allowing the folks at Google to read them?  Providing scientific articles to those at elite universities in the First World, but not to children in the Global South? It&#8217;s outrageous and unacceptable.</p><footer><strong>Aaron Swartz</strong><cite><a href='https://archive.org/details/GuerillaOpenAccessManifesto'>The Guerilla Open Access Manifesto</a></cite></footer></blockquote>


<p>Einhegungen, die aus einer Gemeinwirtschaft Privatbesitz schaffen, finden nicht über Nacht statt. In England begann die Transformation der Landwirtschaft im 16. Jahrhundert und war im 19. Jahrhundert abgeschlossen. Der Höhepunkt der Einhegungen lag zwischen 1760 und 1832, danach waren in Großbritannien die mittelalterlichen Strukturen so gut wie verschwunden, es gab das Konzept des gemeinwirtschaftlichen Landbesitzes nicht mehr.</p>

<p>Am Ende der Transformation war die Idee von Land, dass sich nicht in Privatbesitz befand, bereits so aus dem Bewusstsein verschwunden, dass der bloße Gedanke, über Privatgrundstücke könnten etwa Eisenbahnlinien geführt werden, von Liberalen als &#8220;Diebstahl&#8221; bezeichnet wurde.</p>

<p>George Orwell, der <a href="https://en.wikipedia.org/wiki/As_I_Please">in einer Reihe von Kommentaren für die linksgerichtete Tribune</a> in den 1940er Jahren davon schrieb, sah sich durch einen Kommentator eben dieses Vorwurfs ausgesetzt: Privateigentum an Land für die Allgemeinheit zu nutzen ist Diebstahl.</p>

<p>Daran zu erinnern, wie Landbesitz überhaupt zustande gekommen war, dass es kein vom Himmel gefallenes Naturrecht ist, sondern tatsächlich in einem Transformationsprozess mit Gewalt der Allmende entrissen wurde, war 1944 schon beinahe eine revolutionäre Aussage. Der englische Landadel hatte das Land der Gemeinwirtschaft schlicht unter sich aufgeteilt, mit keiner anderen Legitimation, als der, dass sie zur Durchsetzung ihrer Interessen Gewalt und Staat benutzen konnten. Die Grundlage der Agrarrevolution in England und Wales, die Verarmung der Landbevölkerung und die Freisetzung von Arbeitskräften für die Industrielle Revolution hatte keine andere Legitimation als die, dass die Interessengruppen des Landadels es einfach getan hatten.</p>

<blockquote><p>If giving the land of England back to the people of England is theft, I am quite happy to call it theft. In his zeal to defend private property, my correspondent does not stop to consider how the so-called owners of the land got hold of it. They simply seized it by force, afterwards hiring lawyers to provide them with title-deeds. In the case of the enclosure of the common lands, which was going on from about 1600 to 1850, the landgrabbers did not even have the excuse of being foreign conquerors; they were quite frankly taking the heritage of their own countrymen, upon no sort of pretext except that they had the power to do so.</p><footer><strong>George Orwell</strong><cite><a href='http://www.cooperativeindividualism.org/orwell-george_on-the-origins-of-property-in-land-1944.html'>On the Origins of Property in Land, 1944</a></cite></footer></blockquote>


<p>Erst sehr viel später setzte das Bewusstsein dafür ein, dass Wirtschaften mit Gemeingut nachhaltiger möglich ist. <a href="https://de.wikipedia.org/wiki/Elinor_Ostrom">Elinor Ostrom</a>, die 2009 als erste Frau den Alfred-Nobel-Gedächtnispreis für Wirtschaftswissenschaften für ihre Arbeiten zur Gemeinwirtschaft bekam, befasste sich mit der Frage, wie sich Menschen organisieren, um gemeinschaftlich komplexe Probleme zu lösen. Sie analysierte, wie institutionelle Regeln sich auf Handlungen von Individuen auswirken, die bestimmten Anreizen ausgesetzt sind, Entscheidungen treffen (müssen), und sich zudem noch gegenseitig beeinflussen, und sie zeigte praktikable, gerechte und effiziente Lösungen für diese Probleme auf.</p>

<p>In <a href="https://en.wikipedia.org/wiki/Landless_Workers%27_Movement">Brasilien</a> oder <a href="https://en.wikipedia.org/wiki/Narmada_Bachao_Andolan">Indien</a> entstanden soziale Bewegungen, die sich der revolutionären Erkenntnis widmeten, dass Gemeingut eben nicht von Natur aus eingezäunt werden muss, sondern gemeinsam verwaltet und bewirtschaftet werden kann. Dabei geht es nicht mal um utopische Forderungen wie die Abschaffung von Privateigentum — dieses bleibt neben der Allmende bestehen. Es geht darum, gleichberechtigt einen Raum zu schaffen, in dem kollaborativ, verantwortungsvoll und gemeinsam an der Grundlage des gemeinsamen Überlebens gearbeitet wird und die Schaffung von Einhegungen für das, was vorher nicht eingehegt war, nicht zu ohne Argumente zu akzeptieren.</p>

<p>Dem Internet und der Wissensallmende drohen Einhegungen, die von Landadeligen des 12. Jahrhunderts schrittweise vorgenommen werden, mit keinem anderen Argument als dem, dass es ihnen möglich ist. In Deutschland wurden Hecken und Grenzsteine etwa ab 2004 <a href="https://de.wikipedia.org/wiki/Urheberrechtsgesetz_(Deutschland)#Zweiter_Korb">beim sogenannten Zweiten Korb der Urheberrechtsreform</a> gesetzt, durch den die Rechte der Nutzerinnen und Nutzer eingeschränkt wurden und das Recht auf Privatkopie entstellt wurde. Das <a href="https://de.wikipedia.org/wiki/Leistungsschutzrecht_f%C3%BCr_Presseverleger">Leistungsschutzrecht für Presseverleger</a> ist eine Einhegung der Wiesen und Felder der Allmende im Internet mit keinem anderen Argument als dem, dass es eben mit Lobbyarbeit von Verlagen wie der Axel Springer SE möglich ist, diese als Gesetz durchzusetzen.</p>

<p>Es gibt keinen naturgegebenen Grund dafür, die Allmende zu zerstückeln und einzuhegen, wenn wir sie auch gemeinsam beackern können. Wir können mit Elinor Ostrom wirtschaftswissenschaftlich zeigen, dass Zusammenarbeit möglich und nachhaltig ist und moralisch ist das Argument &#8220;Ich kann es euch wegnehmen, weil ich es euch weggnehmen kann&#8221; einem kulturoptimistischem gemeinschaftlichen Wirtschaften nicht überlegen.</p>

<p>Im schlimmsten Fall sind Einhegungen tödlich. Am zweiten Todestag von Aaron Swartz lohnt es sich daran zu erinnern, dass durch Einhegungen der Wissensallmende einem großen Talent die Luft zum Atmen genommen wurde.  <a href="http://blog.johl.io/blog/2013/01/13/urheberrechtsextremismus/">So wie für den Suizid von Alan Turing die menschenverachtenden homophoben Gesetze der damaligen Zeit und die, die sie geschaffen haben, politisch verantwortlich sind, ist der Wahnsinn der Urheberrechtsextremisten verantwortlich für Aarons Tod. Copyright kills.  An den Händen der Urheberrechtsextremisten klebt sein Blut.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jahresrückblick 2014]]></title>
    <link href="http://blog.johl.io/blog/2015/01/02/jahresruckblick-2014/"/>
    <updated>2015-01-02T21:05:00+01:00</updated>
    <id>http://blog.johl.io/blog/2015/01/02/jahresruckblick-2014</id>
    <content type="html"><![CDATA[<p>Ja, war okay.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vollkommen subjektive Auswahl — was ich mir auf dem #31c3 ansehen werde (wenn ich dazu komme)]]></title>
    <link href="http://blog.johl.io/blog/2014/12/21/31c3/"/>
    <updated>2014-12-21T13:53:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/12/21/31c3</id>
    <content type="html"><![CDATA[<p>Der 31. <a href="https://de.wikipedia.org/wiki/Chaos_Communication_Congress">Chaos Communication Congress</a> naht. Das <a href="https://events.ccc.de/congress/2014/Fahrplan/">Programm</a> ist prall gefüllt mit wirklich hervorragenden Vorträgen und anderen Events. Aus Erfahrung kann ich sagen, dass es trotzdem schwierig ist, den Congress zum Anhören von Vorträgen zu planen, dafür passiert an allen Ecken einfach zuviel. Spätestens am zweiten Tag schmeisst man das sorgsam ausgearbeitete Programm über den Haufen und bleibt in einer Ecke kleben, wo verrückte Menschen gerade an etwas arbeiten, was unbeschreiblich ist und trotzdem hat man einen Congress erlebt, der unvergleichlich ist. Vielleicht ist es wichtiger, sich mit der <a href="https://github.com/MacLemon/CongressChecklist/blob/master/README.md">Checkliste</a> der mitzubringenden Sachen zu beschäftigen, als mit dem Programm. Da Vorträge aufgezeichnet werden, kann man sie später ja noch nachschauen — allerdings könnte das gleich zum nächsten Trugschluss werden: Wenn die &#8220;schau ich mir lieber in der Aufzeichnung an&#8221;-Liste zu lang wird, ist es dann auch wieder Dezember 2015, bis man sie durch hat.</p>

<p>That being said: Eine kleine Auswahl von Vorträgen, die ich in Erwägung ziehe, folgt. Große, für viele sozial wichtige Veranstaltungen (Jahresrückblicke etc.) habe ich erstmal nicht aufgeführt.</p>

<h1>Tag 1</h1>

<p><a href="https://events.ccc.de/congress/2014/Fahrplan/events/6571.html">Die Keynote</a> von <a href="https://de.wikipedia.org/wiki/Alec_Empire">Alec Empire</a> versuche ich mir mal anzusehen. Wird bestimmt hyperreal und noisy. Von Alec Empire stammte schon die Musik zum Trailer vom letzten Jahr.</p>

<p>Dann gehe ich in Saal 2, zu <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6443.html">Trustworthy secure modular operating system engineering</a> von hannes und David. Hannes träumt seit ein paar Jahrzehnten vom Ausstieg aus der Unix-Technologie weltweit und jetzt sieht es so aus, als könnte es was werden, mit einem Betriebsystem, dass die Schwächen von C hinter sich lässt, indem es konsequent in OCaml implementiert wird. Diesmal ist es kein wilder Traum, sondern tatsächlich etwas, was u.a. mit Unterstützung der Uni in Cambridge echten Wumms erzeigen könnte.</p>

<p>Danach folgt das <a href="https://de.wikipedia.org/wiki/Zentrum_f%C3%BCr_politische_Sch%C3%B6nheit">Zentrum für politische Schönheit</a>: <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6584.html">Mit Kunst die Gesellschaft hacken</a>, also die mit den Mauerkreuzen an der EU-Aussengrenze und der Belohnung von 25.000€ für die Verhaftung der Eigentümerfamilie der Firma Krauss-Maffei Wegmann.</p>

<p>Parallel dazu findet ein Vortrag statt, den ich dadurch erst später sehen kann: <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6447.html">Let’s build our own personalized open textile production line</a>.  Schade, denn Open Source auf andere Bereiche der Ökonomie übertragen ist ein richtig spannendes Thema.</p>

<p>Ganz, ganz dick im Kalender steht bei mit der Vortrag zu <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6559.html">Jugend hackt</a>, nicht nur, weil ich in den letzten beiden Jahren das Projekt als Mentor mitbegleitet haben, sondern auch, weil ich alle Vortragenden total toll finde.</p>

<p>Später am Abend werde ich vielleicht bei <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6154.html">Crypto Tales from the Trenches</a> reinschauen, wo u.a. Laura Poitras davon berichtet, wie sie sich als Journalistin im direkten Kontakt mit Edward Snowden vor Ausspähung versuchte zu schützen. Anschliessend wird ihr Film <a href="https://de.wikipedia.org/wiki/Citizenfour_(Film)">CITIZENFOUR</a> gezeigt.</p>

<h1>Tag 2</h1>

<p>Vermutlich werde ich in <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6162.html">Programming with dependent types in Idris</a> gehen, weil ich eine Schwäche für Forschung im Bereich Programmiersprachen habe (und wir das Thema im <a href="http://currybuch.de/">Curry-Buch</a> auch kurz anscheiden). Allerdings läuft parallel <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6344.html">Security Analysis of Estonia&#8217;s Internet Voting System</a>.  Hm, mal sehen.</p>

<p>Klar ist dann allerdings <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6582.html">Das Transparenzportal Hamburg</a>.  Mit dem Hamburger Transparenzgesetz hatte ich ja auch schon <a href="http://blog.johl.io/blog/2014/01/06/lampedusaanfrage/">Erfahrungen gemacht</a>.</p>

<p>Später dann: <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6156.html">Fernvale: An Open Hardware and Software Platform, Based on the (nominally) Closed-Source MT6260 SoC</a>, was ich hauptsächlich auf dem Zettel habe, weil der Open-Hardware-Aktivist <a href="https://en.wikipedia.org/wiki/Andrew_Huang">bunnie</a> vorträgt und ich sein Projekt zum offenen Laptop so spannend finde.</p>

<h1>Tag 3</h1>

<p>An Tag 3 tritt das <a href="https://www.c-base.org/projects/c-atre/">c-atre</a> auf, was ich mir an dem Tag zwischen Lampenfieber und Rumgerenne überhaupt ansehen kann, wird sich zeigen. Unser Stück zu Urheberrecht und Zeitreisen <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6543.html">The Time is Right</a> gibt es am Abend, davor ist aber noch reichlich Programm.</p>

<p><a href="https://events.ccc.de/congress/2014/Fahrplan/events/6350.html">Correcting copywrongs</a> von meiner <a href="https://de.wikipedia.org/wiki/Julia_Reda">Lieblings-Abgeordneten im EU-Parlament</a> ist gesetzt. Wird der Hammer.</p>

<p><a href="https://events.ccc.de/congress/2014/Fahrplan/events/6547.html">&#8220;Exploit&#8221; in theater</a> klingt nicht uninteressant und hat auch was mit Theater zu tun, wenn es klappt, dann schau ich mir das vielleicht an.</p>

<p><a href="https://events.ccc.de/congress/2014/Fahrplan/events/6366.html">IFG – Mit freundlichen Grüßen</a>, völlig angemessen in Saal 1, könnte ein Knüller werden. Letzter Jahr startete nach dem Congress-Vortrag von Stefan Wehrmeyer die Debatte um das <a href="https://fragdenstaat.de/presse/2014-01-21-bmi-mahnt-fragdenstaat-ab/">Zensurheberrecht</a>. Ich erwarte eine ähnliche Bombe dieses Jahr :)</p>

<p>Dann ist Theater. Parallel zu unserer Aufführung gibt es einen Vortrag zu <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6253.html">Computer und Informatik in Nordkorea</a>, den ich dann wohl als Aufzeichnung sehen werde.</p>

<h1>Tag 4</h1>

<p><a href="https://events.ccc.de/congress/2014/Fahrplan/events/6213.html">The rise and fall of Internet voting in Norway</a> klingt interessant, wenn ich um die Uhrzeit schon aufnahmefähig bin.</p>

<p><a href="https://events.ccc.de/congress/2014/Fahrplan/events/6214.html">Attribution revolution</a> ist für mich auch beruflich ein Must. Mal sehen, ob sich Ideen aus dem Vortrag für <a href="http://wikimania2014.wikimedia.org/wiki/Submissions/How_to_stay_out_of_jail_and_still_use_images_from_Wikimedia_Commons">ein Projekt bei uns</a> nutzen lassen.</p>

<p>Dann habe ich noch das <a href="https://events.ccc.de/congress/2014/Fahrplan/events/6562.html">Closing Event</a> auf dem Zettel. Und natürlich Party.</p>

<p>Wird das alles klappen? Ich fürchte nicht. Aber aufgeregt bin ich schon beim Durchsehen des Programms&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Links, frische (und halbfrische) Links!]]></title>
    <link href="http://blog.johl.io/blog/2014/12/07/links/"/>
    <updated>2014-12-07T21:25:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/12/07/links</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://www.theeuropeanlibrary.org/tel4/access/data/opendata/details?id=opendata">European Library released Linked Open Data for 82 million bibliographic records from 25 member libraries. All CC0.</a></li>
<li><a href="https://jakevdp.github.io/blog/2014/11/11/the-hipster-effect-interactive/">The Hipster Effect: An IPython Interactive Exploration</a></li>
<li><a href="http://spectrum.ieee.org/computing/networks/osi-the-internet-that-wasnt">OSI: The Internet That Wasn’t. How TCP/IP eclipsed the Open Systems Interconnection standards to become the global protocol for computer networking</a></li>
<li><a href="https://en.wikipedia.org/wiki/History_of_radio#Legal_issues_with_radio">„When radio was introduced in the 1920s many predicted the end of records. Radio was a free medium for the public to hear music for which they would normally pay. While some companies saw radio as a new avenue for promotion, others feared it would cut into profits from record sales and live performances. Many companies had their major stars sign agreements that they would not appear on radio.&#8221;</a></li>
<li><a href="http://rijksemotions.com/">Rijks Emotions is a student project from Hyper Island, using the Rijksmuseum and Sightcorp api, matching people&#8217;s emotions with their relatives that hang on the museum&#8217;s walls.</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Was gibt es hier zu sehen? Mediawiki APIs hacken]]></title>
    <link href="http://blog.johl.io/blog/2014/11/23/around-me/"/>
    <updated>2014-11-23T16:33:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/11/23/around-me</id>
    <content type="html"><![CDATA[<p>Chantek ist ein besonderer Orang-Utan. Im Yerkes Regional Primate Research Center geboren lernte er innerhalb eines Forschungsprojektes mittels der amerikanischen Gebärdensprache (ASL) mit Menschen zu kommunizieren und gesprochenes Englisch zu verstehen, Grundlagen des Umgangs mit Geld und Spiele. Mit fünfeinhalb Jahren wurde ihm der Stand eines etwa zweijährigen Kindes attestiert, wobei er in einigen Bereichen (z. B. Sprachverständnis und Werkzeugnutzung) die Fertigkeiten eines vierjährigen Kindes aufwies. Über Chantek gibt es <a href="http://de.wikipedia.org/wiki/Chantek">in der Wikipedia</a> noch mehr zu lesen, als ich hier zitiert und zusammengefasst habe.</p>

<p><a href="https://github.com/hay/chantek">Chantek</a> ist aber auch der Name eines Hacks, der auf dem <a href="http://www.mediawiki.org/wiki/Amsterdam_Hackathon_2014">Mediawiki Hackathon 2014 in Amsterdam</a> von <a href="http://www.haykranen.nl/">Hay Kranen</a> gebastelt wurde. Auf Niederländisch heisst &#8220;Api&#8221; auch <a href="http://nl.wikipedia.org/wiki/Apen">Affe</a>. Eine API, die menschliche Sprache (zumindest ein bisschen) versteht, ist gut geeignet, um nach dem sprechenden Affen Chantek benannt zu werden.</p>

<p>Über die Mediawiki API habe ich im letzten Blogbeitrag bereits <a href="http://blog.johl.io/blog/2014/11/17/mediawiki-api/">eine umfassende Einführung</a> geschrieben. Chantek vereinfacht diese API auf besonders schlanke Weise und macht die Unterhaltung ein bisschen angenehmer. Um Properties bei Wikidata abzufragen und Titel darzustellen, brauche ich bei der klassischen <a href="http://www.mediawiki.org/wiki/Wikibase/API">Mediawiki API zu Wikidata</a> typischerweise mehrere API-Calls. Bei Chantek kann ich zum Beispiel sagen, dass mich nur Abfrageergebnisse auf Deutsch interessieren und ich bekomme die Werte dann auch mit ihrer deutschen Bezeichnung zurück.</p>

<h3>Über die Grenzen der Same-Origin-Policy hinweg mit CORS</h3>

<p>Chantek ist eine Python-Anwendung, die die <a href="http://enable-cors.org/">CORS-Spezifikation</a> implementiert, um JavaScript-Anwendungen in Web-Anwendungen zu ermöglichen, Daten auszulesen und darzustellen. Normalerweise gibt es bei JavaScript im Browser die <a href="http://de.wikipedia.org/wiki/Same-Origin-Policy">Same-Origin-Policy</a>, die verhindert, dass Daten aus beliebigen (und damit potenziell unsicheren) Quellen einfach so nachgeladen werden können: Clientseitiges JavaScript kann nur auf Daten der Domain zugreifen, woher auch das JavaScript selbst geladen wurde. Bei API-Calls stellt sich diese Maßnahme als gelinde gesagt schwierig dar. Um diese Beschränkung zu umgehen, gibt es zum Beispiel <a href="http://de.wikipedia.org/wiki/JavaScript_Object_Notation#JSONP">JSONP</a>, das aber selbst nicht unproblematisch ist. CORS ist eine Möglichkeit, die Grenzen der Same-Origin-Policy zu überschreiten, die auch Authentifizierung und feinere Sicherheitsabstufungen beinhaltet und vom W3C spezifiziert wurde.</p>

<p>Leider ist CORS nicht in allen Browsern vorhanden. Wie man browserunhabhängig prüft, ob CORS zur Verfügung steht (bei den meisten modernen Browsern ist das der Fall), zeigt etwa <a href="http://www.html5rocks.com/en/tutorials/cors/">dieses Tutorial von Monsur Hossain</a> und der darin benutzte Code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">createCORSRequest</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="s2">&quot;withCredentials&quot;</span> <span class="k">in</span> <span class="nx">xhr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Check if the XMLHttpRequest object has a &quot;withCredentials&quot; property.</span>
</span><span class='line'>    <span class="c1">// &quot;withCredentials&quot; only exists on XMLHTTPRequest2 objects.</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">XDomainRequest</span> <span class="o">!=</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Otherwise, check if XDomainRequest.</span>
</span><span class='line'>    <span class="c1">// XDomainRequest only exists in IE, and is IE&#39;s way of making CORS requests.</span>
</span><span class='line'>    <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XDomainRequest</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Otherwise, CORS is not supported by the browser.</span>
</span><span class='line'>    <span class="nx">xhr</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">xhr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Zeig mir meine Umgebung, Wikidata!</h3>

<p>Mit Chantek (und CORS) wollte ich eine JavaScript-Webanwendung schreiben, die mir anzeigt, was es in Wikidata um mich herum an geogetaggten Wisssensgegenständen gibt. In Berlin (zumindest innerhalb des S-Bahn-Rings) ist das einiges — viele interessante Orte sinde nur ein paar Hundert Meter weit entfernt und haben einen Wikipedia-Artikel.  Auf dem Land müsste ich meine Anwendung vermutlich ein bisschen erweitern: ein Radius von 500m ist nicht besonders üppig für manche Gegenden. Auch, dass ich Wissensgegenstände nur auf Deutsch suche und Artikel in der deutschsprachigen Wikipedia dazu anzeige, könnte eine überarbeitete Version meiner Anwendung als Parameter änderbar machen.</p>

<p>Als kleiner, schneller Hack zwischendurch, aufgespielt auf einen Webserver, hat mir meine Anwendung aber durchaus Spaß bereitet. Mit dem Mobiltelefon kann ich so schauen, was Wikidata für meine Umgebung anzeigt.</p>

<p>Ein API-Call, um Dinge im meiner Umgebung zu finden, kann mit Chantek
etwa so aussehen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">http</span><span class="o">:</span><span class="c1">//chantek.bykr.org/wikidata/query?q=around[625,52.205,0.119,15]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hiermit frage ich Chantek (über die <a href="http://wdq.wmflabs.org/api_documentation.html">WikidataQuery-API</a>) nach Wikidata-Wissensgegenständen im Umkreis von 15km um Cambridge in England: der erste Parameter (625) bezieht sich auf den Planeten, für den die Koordinaten gelten (Erde), die nächsten zwei sind die Koordinaten von Cambridge und mit 15 gebe ich den Radius an. Auch Brüche sind bei der Angabe des Radius möglich, 0.5 ist also 500m.</p>

<p>Jetzt fehlen mir nur noch meine aktuellen Koordinaten. Moderne Browser unterstützen das HTML5-Feature Geolocation, mit der JavaScript-Bibliothek <a href="http://modernizr.com/">Modernizr</a> kann ich überprüfen, ob dieses Feature vorhanden ist. Da es Privatsphärenbedenken bei der Abfrage von Geokoordinaten gibt, muss der Browser bei der ersten Abfrage der Koordinaten des Standorts von einer neuen Seite die Benutzerin oder den Benutzer fragen, ob das so in Ordnung ist. Wenn zugestimmt wird, können wir die Koordinaten benutzen, eine Abfrage starten und bekommen eine Liste von Wikidata-Items zurück. Tatsächlich erzeugen wir zuerst einen CORS-Request und als Callback-Funktion geht es gleich in die nächste Abfrage, denn wir wollen ja für jedes Element der Liste einen Titel und eine Wikipedia-Seite haben. Das könnte zum Beispiel so aussehen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">locate_me</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Check if we can do HTML5 geolocation</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">Modernizr</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">navigator</span><span class="p">.</span><span class="nx">geolocation</span><span class="p">.</span><span class="nx">getCurrentPosition</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">position</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">lat</span> <span class="o">=</span> <span class="nx">position</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">latitude</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">lon</span> <span class="o">=</span> <span class="nx">position</span><span class="p">.</span><span class="nx">coords</span><span class="p">.</span><span class="nx">longitude</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">chantek</span> <span class="o">=</span> <span class="s2">&quot;http://chantek.bykr.org/wikidata/&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">// Query data around me</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="s2">&quot;query?q=around[625,&quot;</span> <span class="o">+</span> <span class="nx">lat</span> <span class="o">+</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="nx">lon</span> <span class="o">+</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="s2">&quot;0.5]&amp;callback=?&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">query_xhr</span> <span class="o">=</span> <span class="nx">createCORSRequest</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">chantek</span><span class="o">+</span><span class="nx">query</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">query_xhr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;CORS not supported&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="nx">query_xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">query_xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">parseJSON</span><span class="p">(</span><span class="nx">response</span><span class="p">).</span><span class="nx">response</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="c1">// Call queried entities and display them</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">entity</span> <span class="o">=</span> <span class="s2">&quot;entity?q=Q&quot;</span><span class="o">+</span> <span class="nx">value</span> <span class="o">+</span> <span class="s2">&quot;&amp;lang=de&amp;callback=?&quot;</span><span class="p">;</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">entity_xhr</span> <span class="o">=</span> <span class="nx">createCORSRequest</span><span class="p">(</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">chantek</span><span class="o">+</span><span class="nx">entity</span><span class="p">);</span>
</span><span class='line'>              <span class="nx">entity_xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">entity_xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">parseJSON</span><span class="p">(</span><span class="nx">response</span><span class="p">).</span><span class="nx">response</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#location-list&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span>
</span><span class='line'>                    <span class="s2">&quot;&lt;li&gt;&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s2">&quot;&lt;big&gt;&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s2">&quot;&lt;a href=&quot;</span> <span class="o">+</span> <span class="s2">&quot;\&quot;&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="nx">data</span><span class="p">[</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">data</span><span class="p">)[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">sitelinks</span><span class="p">.</span><span class="nx">de</span><span class="p">.</span><span class="nx">url</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s2">&quot;\&quot;&gt;&quot;</span><span class="o">+</span>
</span><span class='line'>                    <span class="nx">data</span><span class="p">[</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">data</span><span class="p">)[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">labels</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s2">&quot;&lt;/a&gt;&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s2">&quot;&lt;/big&gt;&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s2">&quot;&lt;/li&gt;&quot;</span>
</span><span class='line'>                <span class="p">);</span>
</span><span class='line'>              <span class="p">};</span>
</span><span class='line'>              <span class="nx">entity_xhr</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Error making the request&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="p">};</span>
</span><span class='line'>              <span class="nx">entity_xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>          <span class="nx">query_xhr</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Error making the request&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>          <span class="nx">query_xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Geolocation not supported&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Der fertige Hack</h3>

<p>Mit ein bisschen UI und HTML drumherum habe ich diesen kleinen Hack unter <a href="http://www.johl.io/aroundme-wikidata/">http://www.johl.io/aroundme-wikidata/</a> ins Netz gestellt. Ich wünsche viel Spaß!</p>

<p>In der Nähe des U-Bahnhofs Eberswalder Straße in Berlin sieht das auf meinem Mobiltelefon etwa so aus:</p>

<p><img src="http://f.cl.ly/items/262K2m0k4531221t0g1R/aroundme-wikidata.png" width="300"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Die Cola oder das Cola? Mediawiki APIs hacken]]></title>
    <link href="http://blog.johl.io/blog/2014/11/17/mediawiki-api/"/>
    <updated>2014-11-17T22:10:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/11/17/mediawiki-api</id>
    <content type="html"><![CDATA[<p>Die Web-API von Mediawiki (und damit von den meisten Wikimedia-Projekten) ist zwar nicht gerade versteckt, aber meiner Meinung nach viel zu unbekannt. In loser Folge werde ich ein paar Hacks mit APIs für verschiedene Projekte vorstellen, auch um dazu anzuregen, selbst mit der Infrastruktur zu spielen.</p>

<h3>Die Web-API von Mediawiki</h3>

<p>Mediawiki hat eine RESTful Web-API. Leider ist API im Mediawiki-Umfeld ein mehrfach belegtes Wort, so dass es auch eine API gibt, um eigene Erweiterungen in PHP zu schreiben; diese API meine ich in dem Fall nicht, sondern die Schnittstelle, mit der sich Daten und Inhalte per <code>HTTP</code> aus Mediawiki holen lassen.</p>

<p>Zunächst gibt es da einen Endpunkt. Bei den Wikimedia-Projekten liegt dieser unter <code>/w/api.php</code>, bei dem unten benutzten <code>Wiktionary</code> also unter <code>https://de.wiktionary.org/w/api.php</code>. Praktischerweise ist der Endpunkt für die API-Calls auch gleich eine URL zur Dokumentation. Einfach den Endpunkt im Browser eingeben es erscheint eine Seite, auf der die möglichen Calls verzeichnet sind und auch mit Beispielen erklärt werden.</p>

<p>Ein vollständiger API-Call könnte etwa so aussehen:</p>

<p><code>https://de.wiktionary.org/w/api.php?format=json&amp;action=query&amp;prop=revisions&amp;rvprop=content&amp;titles=Cola</code></p>

<p>Schauen wir uns den API-Call mal genauer an und zerlegen ihn in seine Einzelteile.</p>

<h4>Das Format für die Serialisierung</h4>

<p><code>format=json</code></p>

<p>Hiermit sagen wir dem Wikimedia-Web-Service, dass wir den Rückgabewert gern als <code>JSON</code> formatiert bekommen wollen. Alternativ können wir zur Anzeige im Webbrowser das auch schön formatiert mit dem Aufruf <code>format=jsonfm</code> bekommen – das ist manchmal für das Debugging übersichtlicher und hilfreicher. Die API unterstützt noch andere Ausgabeformate wie <code>WDDX</code>, <code>XML</code>, <code>YAML</code> und eine native PHP-Serialisierung, aber möglicherweise werde diese in Zukunft nicht mehr bedient. <code>JSON</code> wird stark präferiert und sollte wenn immer möglich benutzt werden.</p>

<h4>Die Action</h4>

<p><code>action=query</code></p>

<p>Die &#8220;Action&#8221;, also sozusagen das Verb, ist der eigentliche Befehl, der aufgerufen wird. Es gibt etliche solche Actions, die in der Mediawiki-API dokumentiert sind, Extensions können noch weitere Actions hinzufügen, die Actions zu Wikidata etwa beginnen mit &#8220;wb&#8221; für <a href="http://wikiba.se/">Wikibase</a>. Hier benutzen wir <code>query</code>zur Abfrage von Daten.</p>

<p>Die Action <code>query</code> ist selbst wieder umfangreich dokumentiert, wir
schauen uns hier ein paar beispielhafte Parameter an.</p>

<h4>Action-spezifische Parameter</h4>

<p><code>titles=Cola</code></p>

<p>Wir fragen hier die API nach den Daten einer Wiki-Seite mit dem Titel &#8220;Cola&#8221;. In der Abfrage werden Titel URL-kodiert, wenn der Titel also ein Leerzeichen enthält, wird dieses zu <code>%20</code>. Wenn mehrere Seiten gleichzeitig abgefragt werden können (und sollten) sie kombiniert werden, um nicht durch mehrere Abfragen hintereinander die Netzwerklast unnötig zu erhöhen: <code>titles=PageA|PageB|PageC</code></p>

<p><code>prop=revisions</code></p>

<p>Mit diesem Parameter können wir eine Revision der Seite angeben. Wenn wir keine weiteren Informationen zur Revision angeben bekommen wir die aktuelle Version der Seite.</p>

<p><code>rvprop=content</code></p>

<p>Mit diesem Parameter sagen wir der API, dass wir den Inhalt der Seite haben wollen. Hätten wir stattdessen zum Beispiel <code>rvprop=content|user</code> angegen, bekämen wir den Inhalt un den Benutzer, der die letzte Änderung vorgenommen hat.</p>

<p>Es gibt über die API und mögliche Parameter und Actions noch viel mehr zu sagen, aber als Beispiel reicht das erstmal. Die Dokumentation zur API ist noch viel umfangreicher. Ein guter Einstiegspunkt ist die <a href="https://www.mediawiki.org/wiki/API:Main_page">Dokumentation auf Mediawiki</a>, die ich hier teilweise übersetzt habe.</p>

<p>Eine gute Einführung in die API gibt es auch als Video:</p>

<iframe src="https://commons.wikimedia.org/wiki/File%3AThe_MediaWiki_Web_API_and_How_to_use_it_-_San_Francisco_Wikipedia_Hackathon_2012.ogv?embedplayer=yes" width="512" height="288" frameborder="0" ></iframe>


<div class="description mw-content-ltr en" dir="ltr" lang="en"  style="font-size: small;">Video from the <a href="http://blog.johl.io//www.mediawiki.org/wiki/San_Francisco_Hackathon_2012" class="extiw" title="mw:San Francisco Hackathon 2012">San Francisco Hackathon 2012</a>: How to use the <a href="http://blog.johl.io//www.mediawiki.org/wiki/API" class="extiw" title="mw:API">MediaWiki API</a>. Speaker is <a href="https://commons.wikimedia.org/w/index.php?title=User:Catrope&amp;action=edit&amp;redlink=1" class="new" title="User:Catrope (page does not exist)">Roan Kattouw</a>, facilitated by <a href="https://commons.wikimedia.org/wiki/User:Sumanah" title="User:Sumanah">Sumana Harihareswara</a>. <a class="external text" href="https://www.mediawiki.org/wiki/API/Tutorial">Tutorial reference includes useful links and instructions.</a></div>


<p></p>


<h3>Artikel von Substantiven mit <code>migrationsschatten.py</code> abfragen</h3>

<p>Als erstes Beispiel für eine Spielerei mit der API geht es um Zweifelsfragen der deutschen Sprache. Eine sehr gute Freundin von mir, beneidenswert bilingual aufgewachsen mit Deutsch und Englisch als Muttersprache, erzählte mir vor einiger Zeit davon, dass sie dann doch manchmal überrascht sei, welches grammatikalische Geschlecht und damit welchen Artikel ein Wort im Deutschen hat: <em>&#8220;<strong>Der</strong> Knoblauch? Ernsthaft?&#8221;</em>. Wie gesagt, es handelt sich bei ihr um eine Muttersprachlerin, aber diesen Einwand wischte sie schnell beiseite mit <em>&#8220;Ach, das ist eben mein Migrationsschatten&#8221;</em>.</p>

<p>Das Problem ist aber häufig genug, um sich hinzusetzen und ein kleines Programm zu schreiben, das Wiktionary nach dem korrekten Artikel befragt. Heisst es &#8220;der Laptop&#8221; oder &#8220;das Laptop&#8221;? Und was war mit der Werbung einer österreichischen Energydrink-Marke, die von &#8220;das Cola&#8221; sprach? Ist das korrekt?</p>

<p>Das Progrämmchen ist ein bisschen älter, aber ich habe es seitdem ein bisschen poliert und umgeschrieben. Die Freundin mit der Frage nach den Artikeln benutzt es nach eigener Aussage regelmäßig. Im Original ist es <a href="https://gist.github.com/johl/5515041">als gist auf Github</a> verfügbar, aber gehen wir das Programm doch mal der Reihe nach durch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Es beginnt mit ein paar Imports. Das Programm ist für Python 2.7 geschrieben, eine Portierung nach Python3 lasse ich mal als Aufgabe für die Leserin oder den Leser (<code>urllib2</code> und <code>json</code> bräuchten dafür Liebe, die über die automatische Portierung mit
<a href="https://docs.python.org/2/library/2to3.html">2to3</a> hinausgeht).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&#39;Abfrage mit: </span><span class="si">%s</span><span class="s"> Substantiv&#39;</span> <span class="o">%</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="n">substantiv</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wenn kein Substantiv angegeben ist, ist die ganze Sache auch schon vorbei, ansonsten nehmen wir an, dass der erste Kommandozeilenparameter das gesuchte Substantiv ist.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span>
</span><span class='line'>        <span class="s">&#39;http://de.wiktionary.org/w/api.php?&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s">&#39;format=json&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s">&#39;&amp;action=query&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s">&#39;&amp;prop=revisions&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s">&#39;&amp;rvprop=content&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="s">&#39;&amp;titles=&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="n">substantiv</span>
</span><span class='line'>        <span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'><span class="k">except</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&#39;Problem beim Zugriff auf Wiktionary.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wir basteln uns die API-Anfrage zusammen. Oben ist erklärt, wieso die Abfrage so aussieht, wie sie aussieht. Wenn die Abfrage über das Internet nicht klappen sollte, brechen wir hier ab.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="n">page</span> <span class="o">=</span> <span class="n">content</span><span class="p">[</span><span class="s">&#39;query&#39;</span><span class="p">][</span><span class="s">&#39;pages&#39;</span><span class="p">][</span><span class="n">content</span><span class="p">[</span><span class="s">&#39;query&#39;</span><span class="p">][</span><span class="s">&#39;pages&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">()[</span><span class="mi">0</span><span class="p">]]</span>
</span><span class='line'><span class="k">if</span> <span class="s">&#39;revisions&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">page</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span>
</span><span class='line'>            <span class="s">&#39;Substantiv nicht im deutschsprachigen Wiktionary verzeichnet.&#39;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="n">wikitext</span> <span class="o">=</span> <span class="p">(</span><span class="n">page</span><span class="p">[</span><span class="s">&#39;revisions&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="s">&#39;*&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Der Seiteninhalt wird als <code>JSON</code> eingelesen und in eine Python-Datenstruktur hineingeschlürft. Wenn es keine Seite mit dem Titel gibt, der gewünscht ist, brechen wir ab. <a href="http://blog.johl.io/blog/2013/10/20/autovivication/">Python kennt schließlich keine Autovivication bei Collections</a>, also passen wir auf wie ein Luchs, dass wir nicht auf eine Struktur zugreifen, für die es keinen Key gibt.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;===\s?,\s?&#39;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&#39;&#39;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&#39;(,\s?(,\s?)?)*&#39;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&#39;\s?===&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">wikitext</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">match</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&#39;Kein Substantiv!&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Es folgt eine epische <em>regular expression</em>, mit der der <a href="https://de.wikipedia.org/wiki/Wikitext">Wikitext</a> geparst wird. Leider wird im Wiktionary nicht ganz durchgängig dasselbe Pattern für die Angabe des grammatischen Geschlechts genutzt. Aber irgendwie sowas wie &#8220;m&#8221; oder &#8220;mf&#8221; oder &#8220;m,f,n&#8221; steht hinter einer Template-Variable, die ein Substantiv bezeichnet. Wenn nicht mal dieses Pattern gefunden wird, ist der Suchstring wohl kein Substantiv und wir verabschieden uns aus dem Programm.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">genera</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">&#39;^[mfn]$&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">),</span>
</span><span class='line'>                <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">,</span> <span class="n">match</span><span class="o">.</span><span class="n">groups</span><span class="p">()))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wir filtern aus den <em>capturing brackets</em> alles heraus, was nicht &#8220;m&#8221;, &#8220;f&#8221;, oder &#8220;n&#8221; ist. Ich finde da eine Lösung mit zwei Filtern (und anonymen Lambda-Funktionen) am elegantesten, aber das ist natürlich Geschmackssache.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;der &quot;</span> <span class="o">+</span> <span class="n">substantiv</span> <span class="k">for</span> <span class="n">genus</span> <span class="ow">in</span> <span class="n">genera</span> <span class="k">if</span> <span class="n">genus</span> <span class="o">==</span> <span class="s">&quot;m&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;die &quot;</span> <span class="o">+</span> <span class="n">substantiv</span> <span class="k">for</span> <span class="n">genus</span> <span class="ow">in</span> <span class="n">genera</span> <span class="k">if</span> <span class="n">genus</span> <span class="o">==</span> <span class="s">&quot;f&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;das &quot;</span> <span class="o">+</span> <span class="n">substantiv</span> <span class="k">for</span> <span class="n">genus</span> <span class="ow">in</span> <span class="n">genera</span> <span class="k">if</span> <span class="n">genus</span> <span class="o">==</span> <span class="s">&quot;n&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">artikel</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="n">f</span> <span class="o">+</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mit ein paar <em>list comprehensions</em> bauen wir uns drei Listen mit den gefilterten Ergebnissen, die wir dann zu einer flachen Ergebnisliste vereinigen (<code>artikel</code>). Natürlich kann ein Substantiv mehr als ein grammtisches Geschlecht und damit mehr als einen gültigen Artikel haben.</p>

<p>Warum basteln wir uns eine Liste? Nun, darum:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">map</span><span class="p">(</span><span class="k">print</span><span class="p">,</span> <span class="n">artikel</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lieber ein gedingenes <code>map</code> auf eine Liste als eine <code>for</code>-Schleife. Da wir <code>print</code> als Funktion benutzen können (wir haben extra <code>from __future__ import print_function</code> benutzt), können wir diese Funktion auf alle möglichen Ergebnis-Strings anwenden.</p>

<p>Was gibt dieses Programm jetzt aus? Nun, schauen wir mal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">migrationsschatten</span><span class="o">.</span><span class="n">py</span> <span class="n">Knoblauch</span>
</span><span class='line'><span class="n">der</span> <span class="n">Knoblauch</span>
</span></code></pre></td></tr></table></div></figure>


<p>oder auch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">migrationsschatten</span><span class="o">.</span><span class="n">py</span> <span class="n">Ketchup</span>
</span><span class='line'><span class="n">der</span> <span class="n">Ketchup</span>
</span><span class='line'><span class="n">das</span> <span class="n">Ketchup</span>
</span></code></pre></td></tr></table></div></figure>


<p>oder gar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">migrationsschatten</span><span class="o">.</span><span class="n">py</span> <span class="n">Joghurt</span>
</span><span class='line'><span class="n">der</span> <span class="n">Joghurt</span>
</span><span class='line'><span class="n">die</span> <span class="n">Joghurt</span>
</span><span class='line'><span class="n">das</span> <span class="n">Joghurt</span>
</span></code></pre></td></tr></table></div></figure>


<p>Und was ist mit der Frage aus der Überschrift?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">migrationsschatten</span><span class="o">.</span><span class="n">py</span> <span class="n">Cola</span>
</span><span class='line'><span class="n">die</span> <span class="n">Cola</span>
</span><span class='line'><span class="n">das</span> <span class="n">Cola</span>
</span></code></pre></td></tr></table></div></figure>


<p>So seltsam das für bundesdeutsche Sprecherinnen und Sprecher klingen mag, <strong>das</strong> Cola ist okay, sagt Wiktionary. Es handelt sich um einen <a href="https://de.wikipedia.org/wiki/Austriazismus">Austriazismus</a>.</p>

<p><a href="https://de.wiktionary.org/wiki/leiwand">Leiwand</a>!</p>

<p>Wie bereits gesagt, das vollständige Programm <a href="https://gist.github.com/johl/5515041">findet sich hier</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Links, Links, Links]]></title>
    <link href="http://blog.johl.io/blog/2014/11/16/links/"/>
    <updated>2014-11-16T13:06:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/11/16/links</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/mapmeld/profanity65#profanity65">Encrypt your e-mail with PGP and random profanity</a></li>
<li><a href="http://learnlispthehardway.org/">Learn Lisp The Hard Way</a></li>
<li><a href="https://wwwwwwwwwwwwwwwwwwwwww.bitnik.org/r/">&#8220;The Random Darknet Shopper is an automated online shopping bot which we provide with a budget of $100 in Bitcoins per week. Once a week the bot goes on shopping spree in the deep web where it randomly choses and purchases one item and has it mailed to us.&#8221;</a></li>
<li><a href="http://www.washingtonpost.com/news/storyline/wp/2014/11/11/the-mathematician-who-proved-why-hipsters-all-look-alike/">The mathematician who proved why hipsters all look alike: What brain neurons tell us about the &#8216;hipster effect&#8217; when all contrarians end up looking the same</a></li>
<li><a href="http://openoil.net/2014/11/11/openoil-launches-repository-385-oil-contracts-from-54-countries-one-click-away/">OpenOil launches repository: 385 oil contracts from 54 countries, one click away</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schnelle Links]]></title>
    <link href="http://blog.johl.io/blog/2014/11/07/links/"/>
    <updated>2014-11-07T12:55:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/11/07/links</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://dangerousminds.net/comments/codex_seraphinianus_a_new_edition_of_the_strangest_book_in_the_world">Codex Seraphinianus: A new edition of the strangest book in the world</a></li>
<li><a href="http://chrishadfield.ca/space-oddity/">When David Bowie wrote and recorded Space Oddity in 1969, I wonder if he ever imagined it being played in orbit?</a></li>
<li><a href="https://en.wikipedia.org/wiki/How_does_one_patch_KDE2_under_FreeBSD%3F">&#8220;How does one patch KDE2 under FreeBSD?&#8221; (Russian: &#8220;Как пропатчить KDE2 под FreeBSD?&#8221;), an internet meme in Russian Internet culture</a></li>
<li><a href="http://blog.cryptographyengineering.com/2014/08/whats-matter-with-pgp.html">What&#8217;s the matter with PGP?</a></li>
<li><a href="http://pastebin.com/HrcErVWe">Pastebin: Recommendations for the Hacktivist Community</a> (via <a href="http://www.reddit.com/r/blackhat/comments/2ljjey/recommendations_for_the_hacktivist_community/">reddit</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Praktische Fragen der Ethik in der Software-Entwicklung]]></title>
    <link href="http://blog.johl.io/blog/2014/11/07/ethik/"/>
    <updated>2014-11-07T12:04:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/11/07/ethik</id>
    <content type="html"><![CDATA[<blockquote><p>It should be noted that no ethically-trained software engineer would ever consent to write a DestroyBaghdad procedure. Basic professional ethics would instead require him to write a DestroyCity procedure, to which Baghdad could be given as a parameter.</p><footer><strong>Nathaniel Borenstein</strong><cite><a href='http://www.guppylake.com/~nsb/CSCW-ATOMICMAIL.txt'>Computational Mail as Network Infrastructure for Computer-Supported Cooperative Work</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dinge]]></title>
    <link href="http://blog.johl.io/blog/2014/05/29/dinge/"/>
    <updated>2014-05-29T18:42:00+02:00</updated>
    <id>http://blog.johl.io/blog/2014/05/29/dinge</id>
    <content type="html"><![CDATA[<p>Einigen Dingen ist etwas einbeschrieben:</p>

<blockquote><p>Wie manchen Dingen Gesten, und damit Weisen des Verhaltens einbeschrieben sind. Pantoffel — »Schlappen«, Slippers — sind darauf berechnet, daß man ohne Hilfe der Hand mit den Füßen hineinschlüpft. Sie sind Denkmale des Hasses gegen das sich Bücken.</p><footer><strong>Theodor W. Adorno</strong><cite>Minima Moralia</cite></footer></blockquote>


<p>Andere Dinge hingegen werden durch kreativ-kritische Aneignung von dem Kontext befreit, in denen ihnen ein intendierter Zweck einbeschrieben ist.</p>

<p>Eine Dose mit Chips von <a href="http://www.oreillynet.com/cs/weblog/view/wlg/448">Pringels wird zur Wavelan-Yagi-Antenne</a> — auch wenn Pringels-Dosen sich gar nicht am besten für <a href="https://en.wikipedia.org/wiki/Cantenna">diesen Antennentyp</a> eignen.</p>

<p>Und eine <a href="https://en.wikipedia.org/wiki/Altoids">Dose mit Altoids-Mints</a> ist für mich dann kein Behälter für Minz-Bonbons mehr. In erster Linie sehe ich es es als <a href="http://tryingtodotheprojects.blogspot.de/2008/04/arduino-altoids-tin.html">Gehäuse für Arduino-Basteleien</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Es tut sich was]]></title>
    <link href="http://blog.johl.io/blog/2014/03/19/probe/"/>
    <updated>2014-03-19T13:31:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/03/19/probe</id>
    <content type="html"><![CDATA[<p>Es passieren Sachen im <a href="http://www.c-base.org/projects/c-atre/">c-atre</a>, dem Science-Fiction-Theater in der <a href="https://de.wikipedia.org/wiki/C-base">c-base</a>. Stichworte: Urheberrecht, Zeitreisen. Im Mai wissen wir mehr.</p>

<p><img src="http://f.cl.ly/items/0u1E432E1E1w3x1H3L0A/probe.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Links zwischendurch]]></title>
    <link href="http://blog.johl.io/blog/2014/02/09/links/"/>
    <updated>2014-02-09T10:35:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/02/09/links</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://zulko.github.io/blog/2014/01/23/making-animated-gifs-from-video-files-with-python/">Making GIFs From Video Files With
Python</a></li>
<li><a href="http://www.math.nus.edu.sg/aslaksen/calendar/chinese.shtml">The Mathematics of the Chinese
Calendar</a></li>
<li><a href="http://pcg.wikidot.com/pcg-algorithm:dungeon-generation">Procedural Content Generation Wiki: Dungeon
Generation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pad-Thai-Tag]]></title>
    <link href="http://blog.johl.io/blog/2014/01/11/pad-thai/"/>
    <updated>2014-01-11T23:11:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/01/11/pad-thai</id>
    <content type="html"><![CDATA[<p>Es fing damit an, dass ich dies hier auf Twitter schrieb:</p>

<blockquote class="twitter-tweet" lang="en"><p>The most cryptographically secure stir-fried rice noodle dish in the world: One-time Pad Thai.</p>&mdash; Jens Ohlig (@johl) <a href="https://twitter.com/johl/statuses/421802367320064000">January 11, 2014</a></blockquote>


<p> <script async src="http://blog.johl.io//platform.twitter.com/widgets.js" charset="utf-8"></script>
Dann bekam ich Hunger. <a href="https://de.wikipedia.org/wiki/Phat_Thai">Phat Thai oder Pad Thai (Thai: ผัดไทย) ist ein traditionelles Nudelgericht der thailändischen Küche.</a> Mit Reisnudeln, die zusammen mit ein paar Eiern, reichlich Knoblauch und Chili, Tofu, Hühnchen, Austernsauce, Fischsauce, Frühlingszwiebeln und ein bisschen Zucker im Wok gerührt, gebraten und mit nicht zu knapp Mungobohnensprossen und Erdnüssen garniert werden (die Shrimps, die noch dazu gehören, hatte ich nicht zur Hand) lässt sich schon etwas zaubern, was ganz lecker ist. Während des Entstehungsprozesses sah es so aus:
<img src="https://lh6.googleusercontent.com/-0DgupN9I13Q/UtHjKJiAWmI/AAAAAAAADQ8/AZcBQQiykSo/w597-h796-no/1389460376371.jpg" width="320"></p>

<p>Auf meiner Liste von Dingen, die ich mir für 2014 vorgenommen habe, steht neben „Ukulele lernen“ auch „mehr Haskell programmieren“, also warum nicht mal schauen, wie das mit dem One-Time-Pad in Haskell geht.  Ein One-Time-Pad, auch bekannt als Vernam-Chiffre, ist ein kryptographisches Verfahren:</p>

<blockquote><p>Das One-Time-Pad (Abkürzung: OTP, deutsch: Einmalverschlüsselung oder Einmalschlüssel-Verfahren, wörtlich Einmal-Block, nicht zu verwechseln mit dem Einmal-Passwort-Verfahren) ist ein symmetrisches Verschlüsselungsverfahren zur geheimen Nachrichtenübermittlung.  Kennzeichnend ist, dass ein Schlüssel verwendet wird, der (mindestens) so lang ist wie die Nachricht selbst. Das OTP ist informationstheoretisch sicher und kann nachweislich nicht gebrochen werden – vorausgesetzt, es wird bestimmungsgemäß verwendet.</p><footer><strong>Wikipedia</strong><cite><a href='https://de.wikipedia.org/wiki/One-Time-Pad'>One-Time-Pad</a></cite></footer></blockquote>


<p>Zunächst muss ich dazu den Key und den Eingabetext in Bytes umwandeln, damit ich die einzelnen Zeichen per <a href="https://de.wikipedia.org/wiki/Kontravalenz">XOR</a> verbinden kann, um zu verschlüsseln.  Das Internet bietet ja alles. Deshalb war es auch nicht besonders schwer, <a href="https://www.fpcomplete.com/school/to-infinity-and-beyond/pick-of-the-week/bytestring-bits-and-pieces">eine Webseite zu finden, die mir einiges über Bytestrings in Haskell erzählte und auch noch die Lösung für den OTP enthielt</a>.</p>

<div><script src='https://gist.github.com/8378452.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/8378452&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>Das entsprechende Haskell-Package <a href="http://hackage.haskell.org/package/bytestring">bytestrings</a> zickte beim Installieren. Wie mir dann bei der weiteren Suche klar wurde, ist seit Ende letzten Jahres die Haskell-Plattform auf MacOS X 10.9 kaputt — Apple hat beschlossen, den Compiler gcc nicht mehr mit auszuliefern, weshalb bis zur nächsten Haskell-Version ein <a href="http://www.haskell.org/platform/ghc-clang-wrapper">Fix</a> benutzt werden muss, um GHC mitzuteilen, dass clang benutzt werden muss. Die Seite „<a href="http://www.haskell.org/platform/mac.html">Haskell Platform for Mac OS X</a>“ half mir weiter.</p>

<p>Dann passierte noch weiteres Zeug, aber im Wesentlichen war es das mit dem Pad-Thai-Tag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polizei Hamburg möchte lieber keine Auskunft nach dem Transparenzgesetz geben]]></title>
    <link href="http://blog.johl.io/blog/2014/01/06/lampedusaanfrage/"/>
    <updated>2014-01-06T18:59:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/01/06/lampedusaanfrage</id>
    <content type="html"><![CDATA[<p><a href="https://de.wikipedia.org/wiki/Bootsungl%C3%BCck_vor_Lampedusa_2013">Am 3. Oktober 2013 fanden hunderte Menschen bei dem Versuch von der afrikanischen Küste aus in die Europäische Union zu flüchten den Tod.</a> Einige Tage danach begann die Hamburger Polizei mit der Suche nach Überlebenden, indem sie in den Stadtteilen St. Pauli und St. Georg <a href="http://www.taz.de/!125397/">Kontrollen von Menschen mit nicht-weisser Hautfarbe</a> durchführte. Die Bewertung des Verhaltens der Hamburger Polizei möchte ich den Leserinnen und Lesern überlassen, ich las jedenfalls auch schon die Einschätzung als „rassistisch“ für Massenkontrollen aufgrund der Hautfarbe; in vielen Ländern wäre ein solcher Polizeieinsatz vermutlich illegales <em><a href="https://de.wikipedia.org/wiki/Racial_Profiling">racial profiling</a></em>.</p>

<p>Im Oktober 2013 stellte ich eine <a href="http://blog.johl.io/blog/2013/11/18/anfrage/">Anfrage nach dem Hamburger Transparenzgesetz an die Hamburger Polizei zu den Kosten des Einsatzes</a>. Das Transparenzgesetz gilt als vorbildlich in Deutschland. Das Gesetz wurde von einer Volksinitiative von Mehr Demokratie, Transparency International und dem Chaos Computer Club sowie einigen Bündnispartnern <a href="http://de.hamburgertransparenzgesetz.wikia.com/wiki/Hamburger_Transparenzgesetz_Wiki">in einem Wiki</a> geschrieben. Die Kernelemente des Gesetzes sind eine Veröffentlichungspflicht für alle Informationen von öffentlichem Interesse (u.A. Verträge zur Daseinsvorsorge, Gutachten, Geodaten, Baugenehmigungen, Zuwendungsbescheide, § 3), eine Ausweitung des Behördenbegriffs u.A. auf Unternehmen die öffentliche Aufgaben wahrnehmen (§ 2 Abs. 3) sowie eine deutliche Einschränkung der Ausnahmetatbestände, z.B. Betriebs- und Geschäftsgeheimnisse (§§ 4 bis 7). Damit geht das Transparenzgesetz deutlich über bestehende IFGs hinaus. Das Gesetz trat am 6. Oktober 2012 in Kraft.</p>

<p>Meine Anfrage, die <a href="https://fragdenstaat.de/anfrage/polizei-einsatz-gegen-lampedusa-fluchtlinge-im-oktober-2013/">hier einsehbar ist</a>, traf bei der Hamburger Polizei möglicherweise nicht auf Gegenliebe. Ich wurde in einem Schriftwechsel gebeten, meine Anfrage über die Einsätze im Oktober in Hamburg zu konkretisieren, was ich tat, indem ich mitteilte, dass ich den Zeitraum vom 1. bis zum 31. 10. mit „im Oktober“ meinte und mit „in Hamburg“ das Gebiet der Freien und Hansestadt Hamburg. Daraufhin bekam ich eine Mitteilung über Kosten, die ich zum Glück und Dank der Unterstützung vieler guter Menschen im Internet auf mehrere Schultern verteilen konnte — die Kosten für die Anfrage waren innerhalb weniger Minuten zusammen, nachdem ich auf Twitter um Unterstützung gefragt hatte. Im Dezember (wann genau kann ich wegen Abwesenheit nicht feststellen) bekam ich einen Brief der Polizei Hamburg mit dem Datum vom 18.11., also noch innerhalb der gesetzlichen Frist. Darin teilte man mir mit, dass meine Anfrage nicht beantwortet werden würde, „<em>da es sich bei denen von Ihnen gewünschten Unterlagen [&#8230;] um Informationen handelt, deren Bekanntmachung die innere Sicherheit nicht unerheblich gefährden würden.</em>“ Für diese Auskunft wurden mir 165,50€ in Rechnung gestellt.</p>

<p>Der vollständige Brief ist <a href="https://fragdenstaat.de/files/foi/13354/20140106133058415_geschwaerzt.pdf">hier einsehbar</a>. Am Montag, den 6. Januar 2014, bezifferte Peter Born von der Polizei Hamburg die Kosten des Polizeieinsatzes am 22.12. 2013 mit 1,13 Millionen €. Offensichtlich gab es bei der Pressekonferenz plötzliche keine „nicht unerhebliche“ Gefährungen der inneren Sicherheit durch Nennung von Einsatzkosten.</p>

<p>Für mich stellt die Weigerung der Polizei, ihrer gesetzlichen Transparenzpflicht nachzukommen, einen Akt staatlicher Willkür dar. Ich werde deshalb die zuständigen Behörden um Vermittlung bei meiner Transparenzgesetzanfrage bemühen. Leider steht diese Taktik der Hamburger Polizei, sich über geltendes Recht hinwegzusetzen, in einer langen Reihe von Verstößen in den letzten Tagen. Es ist meine Hoffnung, dass ich durch die Vermittlung durch die Aufsichtsbehörden zumindest in diesem einem kleinen Fall die Hamburger Polizei dazu bewegen kann, die  Einhaltung rechtsstaatlicher Grundsätze in Zukunft ernsthafter in Erwägung zu ziehen.</p>

<p><strong>Update</strong>: Nachdem <a href="http://zapp.blog.ndr.de/kosten-polizeieinsatz-transparenzgesetz-hamburg/2014/01/07/">eine Webseite des NDR auch über diesen Blogpost berichtet hat</a>, liegt mittlerweile eine Stellungnahme der Innenbehörde vor, die ich zitieren möchte:</p>

<blockquote><p>Der Sprecher der Hamburger Innenbehörde, Frank Reschreiter, sagt, es gebe keinen Widerspruch. Die Summe von 1,1 Millionen  Euro setze sich aus den Kosten für den Einsatz von Polizisten aus anderen Bundesländern, die der Stadt Hamburg in Rechnung gestellt würden, sowie der entstandenen Schäden an Polizeifahrzeugen zusammen. Die eigentlichen Einsatzkosten der Hamburger Beamten seien damit also nicht erfasst, würden aber als normale laufenden Kosten auch nicht berechnet. Da bei den Lampedusa-Einsätzen keine “Fremdkosten” durch auswärtige Beamte entstanden seien, könnten dort eben gar keine Angaben gemacht werden (wie Ohlig mitgeteilt). Die Begründung mit der möglichen Gefährdung der inneren Sicherheit bezöge sich lediglich auf die von Ohlig zusätzlich angeforderten Einsatz-Unterlagen, nicht auf seine Frage nach den Kosten.</p></blockquote>


<p>Ich nehme zur Kenntnis, dass die Hamburger Polizei keinen Überblick über die Kosten eigener Einsätze (ohne Beteiligung von Polizei aus anderen Bundesländern) hat, auch wenn ich mir vorstellen kann, dass das die (innere) Revision unnötig erschwert. Zu den Kosten von 165,50€ für eine im Wesentlichen unbeantwortete Anfrage werde ich trotzdem die zuständige Behörde zur Vermittlung anrufen.</p>

<p>Für das überaus großartige Portal <a href="https://fragdenstaat.de/">„Frag den Staat“</a>, ohne das ich diese Anfrage vermutlich nie hätte stellen können, kann man auch <a href="https://fragdenstaat.de/hilfe/spenden/">spenden</a>. Um Stefan Wehrmeyer und den anderen tollen Menschen dort beim Weiterbetrieb von „Frag den Staat“ zumindest ein bisschen zu helfen habe ich 10€ in Bitcoin dorthin geschickt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assoziationen aufgrund eines Ohrwurms nach dem Hören des Stückes „Hallelujah“ von Leonard Cohen]]></title>
    <link href="http://blog.johl.io/blog/2014/01/02/halleluja/"/>
    <updated>2014-01-02T01:00:00+01:00</updated>
    <id>http://blog.johl.io/blog/2014/01/02/halleluja</id>
    <content type="html"><![CDATA[<p><strong>Ein Stück im Radio</strong></p>

<p>Wenn man sich in die Welt da draussen begibt, <em>auf der anderen Seite des Videoschirms</em>, wie es in dem Film Tron heisst, trifft man unvermeidlicherweise auf fremde kulturelle Praktiken. Es wird fern gesehen und Radio gehört, zum Beispiel. Über die Weihnachtsfeiertage spielte das Radio ein Lied von Leonard Cohen, das wohl als passend zum Weihnachtsprogramm empfunden wurde. Der Titel lautet &#8220;Hallelujah&#8221; und das Wort hört man ja zur Weihnachtszeit häufiger in christlichen Kirchen, müssen sich die Radiomenschen gedacht haben, also spielen wir das mal. Dass man <a href="https://de.wikipedia.org/wiki/Cohen">anhand des Namens des Interpreten Leonard Cohen</a> hätte raten können, dass er vielleicht einer anderen Religion angehört, deren Bildsprache auch einen wichtigen Platz in seinen Liedern einnimmt — geschenkt. Ebensowenig fiel ins Gewicht, dass Cohen (die praktische Doppelmitgliedschaftsoption des Zen-Buddhismus mitnehmend) einige Zeit als zenbuddhistischer Mönch gelebt hatte.</p>

<p>Einen Ohrwurm wegzubekommen ist nicht einfach, wenn das Internet mit immer neuen Möglichkeiten lockt, noch mehr Details zu einem Lied zu erfahren. Schlimmstenfalls kann es sich zu einer Obsession entwickeln, für die nur ein Blogbeitrag die angemessene Katharsis ist. Dies ist dieser Blogeintrag. Vielleicht ist er an Informationen etwas zu dicht geraten, langsames Lesen ist möglicherweise eine gute Strategie zu Annäherung. Alternativ könnte es auch sein, dass ich einen einzelnen Song einfach zu wichtig nehme und zuviel Zeit in Assoziationen bezüglich eines Popmusikstückes gesteckt habe.</p>

<p><strong>Erste Strophe: Quine und Strange Loop</strong></p>

<pre>
G                   Em  
I heard there was a secret chord 
G                        Em
that David played and it pleased the Lord,
    C  2x            (D)               G     (D)
But you don't really care for music do you.
G                     /C         D     
It goes like this the fourth the fifth,              
   /Em                /C     D    
the minor fall and the major lift
   /Em(D)            D(D7/+?)  Em
The baffled king composing hallelujah
     C         Em          C        G-D-G
Hallelujah, Hallelujah, Hallelujah, Hallelujah
</pre>


<p>Das Lied ist in G-Dur und im 6/8-Takt. Ein Takt in Triolen (3/4 oder 6/8) ist typisch für Gospel-Musik, da es auch bei langsamen, getragenen Stücken noch eine gewisse Dynamik, einen tänzelnden Charakter behält.</p>

<p>Die erste Zeile bezieht sich auf König David, den Psalmendichter, der auf seiner Harfe spielt. Auf die biblische Bildsprache kommen wir später zurück, denn viel auffälliger ist in der Strophe die Selbstbezüglichkeit.</p>

<p>Benannt nach dem amerikanischen Logiker <a href="https://de.wikipedia.org/wiki/Willard_Van_Orman_Quine">Willard Van Orman Quine</a> prägte <a href="https://de.wikipedia.org/wiki/Douglas_Hofstadter">Douglas Hofstadter</a> den Begriff <em>Quine</em> für ein <a href="https://de.wikipedia.org/wiki/Quine_(Computerprogramm)">selbstbezügliches Computerprogramm</a>, <em>das eine Kopie seiner selbst (üblicherweise seines Quelltextes) als Ausgabe schreibt.</em></p>

<p>Ein Quine in Lisp könnte etwa so aussehen:</p>

<pre>
((lambda (x)
  (list x (list (quote quote) x)))
 (quote
    (lambda (x)
      (list x (list (quote quote) x)))))
</pre>


<p>Beim Aufruf ergibt dieses Programm genau die Ausgabe seiner selbst. In Sprachen, die eine leere Eingabedatei als syntaktisch korrektes Programm erlauben, ist ein minimales Quine-Programm denkbar: eine leere Datei, die kompiliert ihren Inhalt, nämlich nichts, ausgibt. Interessanter sind Quines höherer Ordnung, etwa <a href="http://blog.sigfpe.com/2011/01/quine-central.html">dieser mehrstufige Quine</a>: <em>The code below spits out a Haskell program that prints out a Perl program that prints out a Python program that prints out a Ruby program that prints out a C program that prints out a Java program that prints out the original program.</em></p>

<p>In der allerersten Ausgabe der CCC-Zeitschrift <a href="https://de.wikipedia.org/wiki/Die_Datenschleuder">Datenschleuder</a> 1984 gab es eine <a href="http://www.offiziere.ch/trust-us/habi1/136_aufnahme.html">„Aufnahmeprüfung für den C.C.C.“</a> mit der Forderung, einen Quine zu programmieren:</p>

<p><em>Gesucht ist ein Programm in einer beliebigen Programmiersprache, das eine &#8220;rekursive&#8221; Aufgabe erfüllt: Es soll, wenn es läuft, den Programmquelltext (sich selbst) ausgegeben. Triviallösungen wie (unter einigen BASIC&#8217;s möglich) von</em>
<code>10 LIST</code>
<em>werden nicht akzeptiert!!!</em></p>

<p>Die erste Strophe von Cohens „Hallelujah“ beinhaltet einen musikalischen Quine und erzeugt damit eine <a href="https://de.wikipedia.org/wiki/Seltsame_Schleife">Seltsame Schleife oder einen Strange Loop</a>, also einen Text, der Aussagen über sich selbst macht und damit möglicherweise kognitiv ein Paradoxon erzeugt, das den Text auf eine weitere Ebene hebt. Das bekannte <a href="https://de.wikipedia.org/wiki/L%C3%BCgner-Paradox">Lügner-Paradox</a>, also ein Satz, der seine eigene Falschheit behauptet, ist ein Beispiel für eine Seltsame Schleife. In der ersten Strophe von Hallelujah finden wir ein weiteres Beispiel. Die geheime Harmoniefolge, die David auf seiner Laute schlägt und die den Herrn erfreut und mit der er zu seinem eigenen Erstaunen das Hallelujah komponiert („<em>the baffled king composing Hallelujah</em>“) wird explizit genannt und stellt für das Lied, wenn es als mathematische Funktion gesehen wird, die Ausgabe dar: <em>It goes like this the fourth the fifth, the minor fall and the major lift</em>. Von G ausgehend begleitet den Text dabei die Quarte (C-Dur), die Quinte (D-Dur), der <em>minor fall</em> in die parallele Moll-Tonart (E-Moll) und hinauf ins Dur (C-Dur). Ein musikalischer Quine entsprechend der Harmonielehre, <em>but you don&#8217;t really care for music do you?</em></p>

<p><strong> Zweite Strophe: Batseba und Delila </strong></p>

<pre>
G                             Em
Your faith was strong but you needed proof
G                   Em
You saw her bathing on the roof
    C                            G
Her beauty and the moonlight overthrew you
G                /C       D     
She tied you to a kitchen chair
   /Em                        /C        D      
She broke your throne, and she cut your hair
   /Em(D)              D             Em
And from your lips she drew the Hallelujah
     C         Em            C         G-D-G 
Hallelujah, Hallelujah, Hallelujah, Hallelujah
</pre>


<p>Die zweite Strophe ist vollgestopft mit der Bildsprache der Bibel. Allerdings scheint es sich um eine andere als die hebräische Bibel zu handeln, vielleicht aus einem Paralleluniversum stammend, denn Geschichten werden hier remixt und zusammengeführt, die eigentlich getrennt sind. David, der psalmendichtende König Israels aus der ersten Strophe beobachtet Batseba auf dem Dach und sieht sie baden, was eine lange Schicksalskette von Ehebruch und Sünde, aber auch die Zeugung des späteren Königs Salomon auslöst (<a href="http://www.bibleserver.com/text/EU/2.Samuel11">2. Samuel 11</a>).</p>

<p>Dann wieder ist König David eigentlich Samson der <a href="https://de.wikipedia.org/wiki/Nasir%C3%A4er">Nasiräer</a> (<a href="http://www.bibleserver.com/text/EU/Richter16%2C4">Richter 16,4</a>), der von Gott von Geburt an mit unbesiegbarer Stärke ausgestattet war, solange er sein Gelübde einhielt, niemals seine Haare schneiden zu lassen (die Parallelen zu den <a href="https://de.wikipedia.org/wiki/Dreadlocks">Dreadlocks</a> der Rastafari-Kultur sind nicht zufällig). Seine Feinde waren vom Volk der Philister, die auch der Region den heutigen arabischen Namen فلسطين‎ Falastīn gaben, auch wenn die jetztige palästinensische Bevölkerung aus Arabern besteht, die mit dem historischen Volk der Philister nichts zu tun haben. Die Fürsten der Philister überedeten Delila, das Geheimnis seiner Stärke herauszufinden. Als archetypische Figur der Verführerin in der Bibel — die ihren Betrug zu aller Schande sogar für Geld vollzog! — tat Delila, wie ihr geheissen und entlockte Samson nach drei Versuchen, in denen er ihr die falsche Antwort gab, das Geheimnis. Sie schor ihm schlafend die Haare und Samson konnte von den Philister besiegt werden. Nach seiner Gefangennahme wurde Samson nach Gaza verschleppt, ein Schicksal das viele Jahrhunderte später Leonard Cohen erspart blieb, als er sich 1973 auf israelischer Seite im Yom-Kippur-Krieg verpflichtete und als Truppenunterhalter in der Sinai-Wüste in ein Feuergefecht geriet.</p>

<p><strong> Dritte Strophe: HaSchem </strong></p>

<pre>
G                  Em
You say I took the name in vain
G            Em
I don't even know the name
    C                                G
But if I did, well really, what's it to you?
G                       /C        D    
There's a blaze of light in every word
  /Em            /C         D      
It doesn't matter which you heard                    
   /Em(D)          D        Em
The holy or the broken Hallelujah
     C         Em            C          G-D-G 
Hallelujah, Hallelujah, Hallelujah, Hallelujah
</pre>


<p>Der Erzähler verwehrt sich gegen den Vorwurf, gegen das Gebot „<em>Du sollst den Namen des Herrn, deines Gottes, nicht missbrauchen; denn der Herr lässt den nicht ungestraft, der seinen Namen missbraucht</em>“ (<a href="http://www.bibleserver.com/go.php?lang=de&amp;bible=EU&amp;ref=Ex20%2C7">Exodus 20,7</a>) verstoßen zu haben mit dem Argument, er kenne den Namen ja gar nicht. Mit diesem Unwissen steht er nicht ganz alleine da, denn der Name Gottes (haSchem, השם ‚Der Name‘) ist nach jüdischem Verständnis verloren: Mit der Zerstörung des letzten Tempels im Jahr 70 ging das Wissen um die Aussprache des Namens verloren.</p>

<p>In einem meiner Lieblingsfilme wird die fieberhafte Suche nach dem Namen als mathematische Formel direkt angesprochen. In Darren Aronofskys Film „π“ dreht sich alles um die Suche nach Mustern, die dem vermeintlichen Chaos der Welt zugrunde liegen können: die Fibonacci-Folge ebenso wie das Auf und Ab des Börsenmarktes. Der Mathematiker Max Cohen (noch ein <a href="https://de.wikipedia.org/wiki/Kohanim">Cohen</a>!) vergräbt sich immer wahnhafter in der Suche nach dem Muster, mit katastrophalen Folgen für ihn am Ende. In einer Szene wird er in einem Brooklyner Coffee Shop von einem kabbalistischen Torah-Schüler angesprochen. Dieser versucht ihm zu erklären, dass Hebräisch eine Folge von Zahlen ist; ein Code. In der esoterischen Zahlenmystik erkennt der Mathematiker — vielleicht schon vom Wahnsinn gezeichnet — Parallelen zu seiner eigenen Arbeit:</p>

<iframe width="420" height="315"
src="http://blog.johl.io//www.youtube.com/embed/WFmWhwyA0NU" frameborder="0"
allowfullscreen></iframe>


<p>Aber vielleicht ist die Suche nach dem Namen auch nicht so wichtig, zumindest für Leonard Cohen. <em>It doesn&#8217;t matter which you heard / The holy or the broken Hallelujah</em> Das wirklich Wichtige kommt erst noch.</p>

<p><strong> Vierte Strophe: Eigentlich geht es um die Liebe </strong></p>

<pre>
G                Em
I did my best it wasn't much.
G                    Em
I couldn't feel so I learned to touch.
     C                                G
I've told the truth, I didn't come to fool you.
G                  C        D
And even though it all went wrong,
     Em               C       D
I'll stand before the Lord of Song 
     Em            D               Em
with nothing on my tongue but Hallelujah
     C         Em            C         G-D-G 
Hallelujah, Hallelujah, Hallelujah, Hallelujah
</pre>


<p>Von dem Lied „Hallelujah“ existieren über 100 Cover-Versionen. Die meisten von ihnen benutzen nicht die Strophen 1-4 aus diesem Blogpost, sondern eine neuere Version, die von Leonard Cohen auch live gesungen wird. In einem Interview bezeichnete er die neue Version, die sich deutlich von dem Lied auf seinem 1984er Album <em>Various Positions</em> unterscheidet, als das „weltliche Hallelujah“. Das Thema der neueren Version ist klar die Liebe und es finden sich Zeilen wie „<em>Now maybe there&#8217;s a god above / but all I ever learned from love / is how to shoot at someone who outdrew you</em>“. In der Album-Version tritt der Aspekt, dass es eigentlich am Ende in erster Linie um die Liebe und die Beziehung zu einem Partner geht, viel weniger deutlich zu Tage.  Dafür gibt es mehr Mathematik und Bilder aus der Bibel, erst in der letzten Strophe wird das Geheimnis aufgedeckt. <em>I did my best it wasn&#8217;t much. / I couldn&#8217;t feel so I learned to touch.</em> Wovon man nicht sprechen kann, das müssen wir lernen zu fühlen.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anfrage nach dem Hamburger Transparenzgesetz]]></title>
    <link href="http://blog.johl.io/blog/2013/11/18/anfrage/"/>
    <updated>2013-11-18T11:37:00+01:00</updated>
    <id>http://blog.johl.io/blog/2013/11/18/anfrage</id>
    <content type="html"><![CDATA[<p><strong>Update: Das ging ja schnell. Das Geld ist ungefähr zusammen, den Rest übernehme dann ich.</strong></p>

<p><strike><strong>Mag sich jemand finanziell beteiligen?</strong></strike> Ich habe im Oktober eine Anfrage nach dem Hamburger Transparenzgesetz an die Hamburger Polizei gestellt. Mich interessieren die Kosten der Polizeieinsätze gegen Lampedusa-Flüchtlinge. Meine Anfrage habe ich über das sehr empfehlenswerte Portal &#8220;Frag den Staat&#8221; gestellt und <a href="https://fragdenstaat.de/anfrage/polizei-einsatz-gegen-lampedusa-fluchtlinge-im-oktober-2013/">ist hier einsehbar</a>.</p>

<p>Über die von Kritikerinnen und Kritikern als rassistisch bezeichneten Kontrollen von afrikanischen Menschen in Hamburg hatte die Presse ausgiebig berichtet, als Beispiel sei hier <a href="http://www.spiegel.de/politik/deutschland/lampedusa-gruppe-senat-in-hamburg-geht-gegen-fluechtlinge-vor-a-928236.html">ein Artikel bei Spiegel Online</a> angegeben, aber das Netz ist voll von mehr.</p>

<p>Der Hintergrund meiner Anfrage ist, dass ich gern die Kosten einschätzen möchte, die durch die Einsätze entstanden sind. Möglicherweise lassen sich die Kosten der Maßnahmen vergleichen mit den (ohnehin beschämend geringen) Kosten für die Unterbringung von Geflüchteten.</p>

<p>Nach einigem hin und her habe ich jetzt einen Bescheid über die Gebühren für die Bearbeitung meiner Anfrage erhalten. 150 bis 200€ soll die Zusammenstellung der Akten kosten, das liegt im üblichen Rahmen für aufwändigere Anfragen. <strike>Ich würde gern diese Kosten mit euch teilen. Wenn ihr euch beteiligen wollt, bitte ich um eine kurze Mail an &#8220;johl at johl.io&#8221; (die Email-Adresse wie üblich verändern wegen Spam, ihr wisst schon). Bitte gebt an, wieviel Euro ihr beitragen wollt, ich schicke dann meine Kontonummer oder, wenn ihr mögt, eine Bitcoin-Adresse. Bitte schickt eure Mail noch gleich raus, denn für meine Antwort ist eine Frist gesetzt.</strike></p>

<p>Vielen Dank!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leseempfehlungen]]></title>
    <link href="http://blog.johl.io/blog/2013/11/17/links/"/>
    <updated>2013-11-17T11:53:00+01:00</updated>
    <id>http://blog.johl.io/blog/2013/11/17/links</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://dat-data.com/">dat: Versionskontrolle für Daten, also das Git-Äquivalent für Datensätze</a></li>
<li><a href="http://haacked.com/archive/2013/11/08/death-to-the-if-statement.aspx">Death to the IF statement: ”We don’t need to try and kill every if statement, but perhaps the more we do, the better our code becomes.”</a></li>
<li><a href="http://www.reddit.com/r/Python/comments/1q7pjg/lanspy_capture_usernames_passwords_and_messages/">LANs.py: capture usernames, passwords and messages + inject arbitrary HTML. Scapy + twisted + nfqueue-bindings</a></li>
<li><a href="http://critical-theory.com/from-deleuze-to-lolcats-the-story-of-the-buzzfeed-guy/">From Deleuze to LOLCats, the Story of the BuzzFeed Guy</a></li>
<li><a href="https://github.com/hypatia/virtuoso">A workshop on fighting impostor syndrome</a></li>
<li><a href="http://neubot.org/">Neubot: the Net Neutrality bot</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autovivication in Python]]></title>
    <link href="http://blog.johl.io/blog/2013/10/20/autovivication/"/>
    <updated>2013-10-20T14:19:00+02:00</updated>
    <id>http://blog.johl.io/blog/2013/10/20/autovivication</id>
    <content type="html"><![CDATA[<blockquote><p>Show me your flowcharts and conceal your tables, and I shall continue to be mystified. Show me your tables, and I won’t usually need your flowcharts; they’ll be obvious.</p><footer><strong>Fred Brooks</strong><cite>The Mythical Man-Month: Essays on Software Engineering</cite></footer></blockquote>


<p>Datenstrukturen sind Magie. In einer magischen, fast vergessenen Sprache wie Perl sind sie sogar noch ein bisschen magischer, um nicht zu sagen: frankensteinhaft. Die Rede ist von Autovivication.</p>

<p>Wenn ich einen langen komplexen Pfad in meinem Dateisystem anlege, der ein Directory in einem noch zu erstellenden Directory erstellt, möchte mein Unix-System nichts davon wissen:</p>

<pre><code>[~]$ mkdir a/b/c
mkdir: a/b: No such file or directory
</code></pre>

<p><a title="By Universal Studios (Dr. Macro) [Public domain], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AFrankenstein's_monster_(Boris_Karloff).jpg"><img width="256" align="left" style="margin-right: 10px" alt="Frankenstein&#039;s monster (Boris Karloff)" src="http://blog.johl.io//upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Frankenstein%27s_monster_%28Boris_Karloff%29.jpg/256px-Frankenstein%27s_monster_%28Boris_Karloff%29.jpg"></a> In anderen Betriebssystemen wäre das anders. Die fehlenden, implizit genannten Schachtelungen, würden automatisch erzeugt. Wie von Geisterhand würden sie ins Leben gerufen werden. Es lebt! <strong>Ergänzung</strong>: <em>Ganz richtig in den Kommentaren bemerkt:</em> <code>mkdir -p a/b/c</code> <em>bringt unter Unix natürlich auch das erwünschte Ergebnis</em>.</p>

<p>Autovivication ist je nach Erwartungshaltung an die Programmiersprache eine überraschende oder logische Eigenschaft von verschachelten Datentypen wie Hashes in Perl, die auch als assoziative Arrays oder in Python-Lingo als Dictionaries bekannt sind. Wenn ich ein Elemente zuweise oder abfrage, das in einem anderen Element geschachtelt ist, das ich bisher noch nicht belegt habe, wird das implizit benannte Element der höheren Schachtelungstiefe automisch angelegt oder eben belebt.</p>

<p>Die automatische Belebung hilft zum Beispiel, wenn ich mit einem Klumpen an Daten arbeite, vielleicht aus einer Open-Data-Quelle wie der <a href="http://daten.berlin.de/datensaetze/als-naturdenkmale-gesch%C3%BCtzte-findlinge-charlottenburg-wilmersdorf">Liste der als Naturdenkmale geschützte Findlinge in Charlottenburg-Wilmersdorf</a> oder einer Abfrage <a href="http://www.wikidata.org/w/api.php?action=wbgetentities&amp;sites=dewiki&amp;titles=Ada%20Lovelace&amp;format=jsonfm&amp;languages=de">bei Wikidata</a>. In dem Klumpen können diverse Verschachtelungstiefen bestehen, ohne dass ich die dahinterstehende Struktur im Detail kenne oder kennen möchte. Wenn ich die Struktur naiv in ein assoziatives Array hineinschlürfe, geht das mit Perl, in anderen Sprachen würde ich höflich, aber bestimmt darauf hingewiesen werden, dass ich einem noch nicht definierten Key einen Wert zuweisen will und das Programm stürzt typischerweise ab. Besonders drollig stellt sich hier PHP mit einem Verhalten an, das als Pseudo-Autovivication bezeichnet werden könnte: Zuweisungen an noch nicht vorher definierte Keys beliebiger Schachtelungstiefe gehen (wie in Perl), Abfragen von nicht definierten Keys gehen nicht (wie in anderen Sprachen).</p>

<p>Schauen wir uns doch mal Autovivication in Perl an:</p>

<figure class='code'><figcaption><span>Autovivication in Perl</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl -w</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Data::</span><span class="n">Dumper</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">my</span> <span class="nv">%data</span><span class="p">;</span>
</span><span class='line'><span class="nv">$data</span><span class="p">{</span><span class="mi">1</span><span class="p">}{</span><span class="mi">2</span><span class="p">}{</span><span class="mi">3</span><span class="p">}</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="k">print</span> <span class="n">Dumper</span><span class="p">(</span><span class="nv">%data</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Das CPAN-Modul <code>Data::Dumper</code> ist möglicherweise vorher noch mit <code>cpan install Data::Dumper</code> zu installieren, bevor es benutzt werden kann. Es dient einfach dazu, eine Datenstruktur in Perl zu inspizieren oder formatiert auszugeben. Mit <code>my %data;</code> definieren wir ein assoziatives Array (Hash) namens data. <code>$data{1}{2}{3} = 10;</code> weist diesem Hash den Wert 10 zu für den Key 3, der in einem Hash mit dem Key 2 steckt, das wiederum in dem Hash-Key 1 von <code>data</code> steckt. Für diejenigen, die in der schwarzen Magie von Perl nicht (mehr) so bewandert sind: Bei der Zuweisung wird aus dem Hash-Vorzeichen <code>%</code> ein <code>$</code>, weil die Variable hier in einem <a href="https://de.wikipedia.org/wiki/Skalare_Variable">skalaren Kontext</a> benutzt wird.</p>

<p>Die Ausgabe ergibt dann:</p>

<pre><code>$VAR1 = '1';
$VAR2 = {
          '2' =&gt; {
                   '3' =&gt; 10
                 }
        };
</code></pre>

<p>In Python wäre der entsprechende Code nicht möglich und würde mit einem Fehler abbrechen:</p>

<pre><code>&gt;&gt;&gt; data = {}
&gt;&gt;&gt; data[1][2][3] = 10
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 1
</code></pre>

<p>Da für die Keys der höheren Schachtelungstiefe noch nichts angelegt wurde, wird die Ausnahme KeyError geworfen und das Programm beendet.</p>

<p>In seiner Standard-Library hat Python allerdings im Modul <code>collections</code> auch den Datentyp <code>defaultdict</code>. Gedacht ist er dafür, um Dictionaries zu erzeugen, bei denen ein Defaultwert schon vorgegeben ist — wenn der Wert nicht definiert ist, soll zum Beispiel standardmäßig 0 als Wert angelegt werden.</p>

<p>Indem wir <code>defaultdict</code> auf leicht kreative Weise mißbrauchen, können wir Autovivication in Python bekommen. Was wäre, wenn wir die Datenstruktur rekursiv definieren und als Defaultwert eine Funktionsreferenz auf eine die Datenstruktur selbst erzeugende Funktion angeben?</p>

<p>Wenn sich die leichte Verwirrung im Kopf über den letzten Satz und rekursiv definierte Datenstrukturen gelegt haben, können wir uns diese Lösung auch mal einfach ansehen:</p>

<figure class='code'><figcaption><span>Autovivication in Python</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
<span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'><span class="n">AutovivicationDict</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">defaultdict</span><span class="p">(</span><span class="n">AutovivicationDict</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">AutovivicationDict</span><span class="p">()</span>
</span><span class='line'><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hurra, Python kann jetzt Autovivication! Allerdings sind die auf diese Weise erzeugten Dictionaries immer noch ziemlich besonders. Wir können (in beliebiger Schachtelungstiefe) zuweisen und abfragen, aber dass es kein herkömmliches Dictionary ist, stellen wir fest, wenn wir es uns einmal ansehen:</p>

<pre><code>&gt;&gt;&gt; data
defaultdict(&lt;function &lt;lambda&gt; at 0x10a774938&gt;, {1: defaultdict(&lt;function &lt;lambda&gt; at 0x10a774938&gt;, {2: defaultdict(&lt;function &lt;lambda&gt; at 0x10a774938&gt;, {3: 10})})})
</code></pre>

<p>Huch, da ist ja alles voller Referenzen auf eine <a href="https://de.wikipedia.org/wiki/Anonyme_Funktion">anonyme Funktion</a>! Für die meisten Anwendungen sollte das keinen Unterschied machen, mit welchem Wert das <code>defaultdict</code> gefüllt wird. Wenn wir allerdings eine Umwandlung unseres speziellen autovivizierten Dictionaries in ein herkömmliches Dictionary brauchen (etwa, um daraus JSON zu machen), brauchen wir noch eine Umwandlungsfunktion. Weil wir gerade so schön im Flow sind, definieren wir diese auch wieder rekursiv und unter Einsatz von <code>lambda</code>:</p>

<figure class='code'><figcaption><span>dictify</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'> </span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">dictify</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">dd</span><span class="p">:</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span><span class="n">dictify</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">dd</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">dd</span><span class="p">,</span> <span class="n">defaultdict</span><span class="p">)</span> <span class="k">else</span> <span class="n">dd</span>
</span></code></pre></td></tr></table></div></figure>


<p>Und jetzt haben wir hier ein ganz normales Dictionary:</p>

<pre><code>&gt;&gt;&gt; dictify(data)
{1: {2: {3: 10}}}
</code></pre>

<p>Wie bereits eingangs erwähnt: Datenstrukturen sind magisch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schnelle Links]]></title>
    <link href="http://blog.johl.io/blog/2013/09/03/schnelle-links/"/>
    <updated>2013-09-03T17:24:00+02:00</updated>
    <id>http://blog.johl.io/blog/2013/09/03/schnelle-links</id>
    <content type="html"><![CDATA[<ul>
<li>Welche Farbe hat das Universum? <a href="https://en.wikipedia.org/wiki/Cosmic_latte">Cosmic Latte</a></li>
<li>Falls jemand gedacht hat, MEGA von Kim Dotcom sei sicher: <a href="http://nzkoz.github.io/MegaPWN/">MEGApwn</a></li>
<li>Schwarze Zukunft: <a href="http://www.iafrofuturism.com/">Afrofuturism: The World of Black Sci Fi and Fantasy Culture</a></li>
<li>Zelluläre Automaten und Rogue-likes: <a href="http://roguebasin.roguelikedevelopment.org/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels">Cellular Automata Method for Generating Random Cave-Like Levels</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
